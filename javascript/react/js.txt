function Square(props) {
  const className = (props.isWinner ? 'highlited ' : '') + 'square';
  return (
    <button className={className} onClick={props.onClick}>
      {props.value}
    </button>
  );
}

class Board extends React.Component { 
  renderSquare(i) {
    const isWinner = this.props.winnerLine && this.props.winnerLine.some(item => item === i);
    return (
      <Square
        isWinner={isWinner}
        key={i}
        value={this.props.squares[i]}
        onClick={() => this.props.onClick(i)}
      />
    );
  }

  renderRow(cols, key) {
    const squares = cols.map(i => this.renderSquare(i));
    return (
      <div key={key} className="board-row">
        {squares}
      </div>
    );
  }
  
  render() {
    const rows = [];    
    let cols = [];
    let key = 1;
    
    for (let i = 0; i < 9; i++) {
      cols.push(i);
      
      if (cols.length === 3) {
        rows.push(this.renderRow(cols, key++));        
        cols = [];
      }
    }

    return (
      <div>
        <div className="status">{status}</div>
        {rows}
      </div>
    );
  }
}

class Game extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      history: [{
        stepNumber: 0,
        squares: Array(9).fill(null),
      }],
      xIsNext: true,
      stepNumber: 0,
      isSortByAsc: true,
      winLine: []
    };
  }

  handleClick(i) {
    let history = this.state.history.slice(0, this.state.stepNumber + 1);
    const current = history[history.length - 1];
    const squares = current.squares.slice();

    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    
    squares[i] = this.state.xIsNext ? 'X' : 'O';
    
    const row = Math.ceil((i + 1) / 3);
    const col = (i % 3) + 1;    
    const stepNumber = history.length;
    
    history = history.concat([{
          stepNumber,
          squares
        }]);
    
    this.setState(state => {
      return {
        history,
        stepNumber,
        xIsNext: !state.xIsNext,
        position: { row, col }
      }
    });
  }

  jumpTo(step) {
    this.setState({
      stepNumber: step,
      xIsNext: (step % 2) === 0,
    });
  }  
  
  sort(isSortByAsc) {
    if (isSortByAsc !== this.state.isSortByAsc) {
      this.setState({
        isSortByAsc
      });
    }
  }
  
  render() {        
    let history = this.state.history.slice();
    
    if (!this.state.isSortByAsc) {
      history = history.reverse();
    }
          
    const current = history.find(item => item.stepNumber === this.state.stepNumber);
    const winner = calculateWinner(current.squares);
        
    const moves = history.map((step, move) => {
      const desc = step.stepNumber > 0 ?
        'Перейти к ходу #' + step.stepNumber :
        'К началу игры';
      const className = step.stepNumber === current.stepNumber ? 'highlited' : '';
      
      return (
        <li key={step.stepNumber}>
          <button className={className} onClick={() => this.jumpTo(step.stepNumber)}>{desc}</button>
        </li>
      );
    });
    
    let status;
    if (winner) {
      status = 'Выиграл ' + winner.square;
    } else {
      status = 'Следующий ход: ' + (this.state.xIsNext ? 'X' : 'O');
    }    
    
    return (
      <div className="game">
        <div className="game-board">
          <Board 
            squares={current.squares}
            onClick={(i) => this.handleClick(i)}
            winnerLine={winner && winner.line}
          />
        </div>
        <div className="game-info">
          <div>{status}</div>
          {this.state.position && (
          <div>Позиция: {this.state.position.row}/{this.state.position.col}</div>
          )}
          <div>Сортировать:
            <label>
              <input type="radio" name="sort" onClick={() => this.sort(true)} defaultChecked={this.state.isSortByAsc} />
              По-возрастанию
            </label>
            <label>
              <input type="radio" name="sort" onClick={() => this.sort(false)} defaultChecked={!this.state.isSortByAsc}/>
              По-убыванию
            </label>            
          </div>
          <ol>{moves}</ol>
        </div>
      </div>
    );
  }
}

// ========================================

ReactDOM.render(
  <Game />,
  document.getElementById('root')
);

  
function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      
      return {
        square: squares[a],
        line: lines[i]
      };
    }
  }
  return null;
}